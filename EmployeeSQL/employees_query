--This section is just used in case we need to drop data tables,
--section will be commented out after first run to avoid accidental loss of data
--DROP TABLE IF EXISTS departments CASCADE;
--DROP TABLE IF EXISTS dept_emp CASCADE;
--DROP TABLE IF EXISTS dept_manager CASCADE;
--DROP TABLE IF EXISTS employees CASCADE;
--DROP TABLE IF EXISTS salaries CASCADE;
--DROP TABLE IF EXISTS titles CASCADE;
--Table departments contains department_no and department_name
CREATE TABLE departments(
	dept_no VARCHAR(50) PRIMARY KEY,
	dept_name VARCHAR(50)
);

CREATE TABLE titles(
	title_id VARCHAR(30) PRIMARY KEY,
	title VARCHAR(30) NOT NULL
);

CREATE TABLE employees(
	emp_no INT PRIMARY KEY,
	emp_title_id VARCHAR(20) NOT NULL,
	birth_date VARCHAR(40) NOT NULL,
	first_name VARCHAR(20) NOT NULL,
	last_name VARCHAR(20) NOT NULL,
	sex VARCHAR(10) NOT NULL,
	hire_date VARCHAR(30) NOT NULL,
	FOREIGN KEY (emp_title_id) 
		REFERENCES titles(title_id)
);

-- Table dept_emp 
CREATE TABLE dept_emp(
	emp_no INT NOT NULL,
	dept_no VARCHAR(50) NOT NULL,
	PRIMARY KEY (emp_no, dept_no),
	FOREIGN KEY (emp_no) 
		REFERENCES employees(emp_no),
	FOREIGN KEY (dept_no) 
		REFERENCES departments(dept_no)
);

-- Table dept_manager 
CREATE TABLE dept_manager(
	dept_no VARCHAR NOT NULL,
	emp_no INT NOT NULL,
	PRIMARY KEY (dept_no, emp_no),
	FOREIGN KEY (dept_no) 
		REFERENCES departments(dept_no),
	FOREIGN KEY (emp_no) 
		REFERENCES employees(emp_no)
);

--Table salaries
CREATE TABLE salaries(
	emp_no INT PRIMARY KEY,
	salary INT NOT NULL,
	FOREIGN KEY (emp_no) 
		REFERENCES employees(emp_no)
);


--1. List the following details of each employee: employee number, last name, first name, sex, and salary.

SELECT employees.emp_no, employees.last_name, employees.first_name, employees.sex, salaries.salary
	FROM employees
	JOIN salaries ON employees.emp_no = salaries.emp_no;

--2. List first name, last name, and hire date for employees who were hired in 1986.

SELECT first_name,last_name,hire_date
	FROM employees
		WHERE hire_date LIKE '%1986'
		ORDER BY hire_date;

--3. List the manager of each department with the following information: department number, department name, the manager's employee number, last name, first nam

SELECT dm.dept_no,d.dept_name,dm.emp_no, e.last_name, e.first_name
FROM dept_manager as dm
INNER JOIN departments AS d
	ON d.dept_no = dm.dept_no
INNER JOIN employees AS e
	ON dm.emp_no = e.emp_no;


--4. List the department of each employee with the following information: employee number, last name, first name, and department name.
SELECT dept_emp.emp_no, employees.last_name, employees.first_name, departments.dept_name
FROM employees
INNER JOIN dept_emp
	ON employees.emp_no = dept_emp.emp_no
INNER JOIN departments
	ON dept_emp.dept_no = departments.dept_no;
--5. List first name, last name, and sex for employees whose first name is "Hercules" and last names begin with "B."

SELECT employees.first_name, employees.last_name, employees.sex
FROM employees 
WHERE first_name = 'Hercules' AND last_name LIKE 'B%';
--6. List all employees in the Sales department, including their employee number, last name, first name, and department name.
SELECT employees.emp_no, employees.last_name, employees.first_name, departments.dept_name
FROM employees
INNER JOIN dept_emp
	ON employees.emp_no = dept_emp.emp_no
JOIN departments
	ON dept_emp.dept_no = departments.dept_no
	WHERE departments.dept_name = 'Sales';

--7. List all employees in the Sales and Development departments, including their employee number, last name, first name, and department name.

SELECT employees.emp_no, employees.last_name, employees.first_name, departments.dept_name
FROM employees
INNER JOIN dept_emp
	ON employees.emp_no = dept_emp.emp_no
INNER JOIN departments
	ON dept_emp.dept_no = departments.dept_no
	WHERE departments.dept_name = 'Sales' OR departments.dept_name = 'Development';
	
--8. In descending order, list the frequency count of employee last names, i.e., how many employees share each last name.

SELECT employees.last_name,COUNT(last_name) AS "frequency_count"
FROM employees
GROUP BY last_name
ORDER BY "frequency_count" DESC;

--This completes the query






